import{_ as s,o as a,c as l,O as n}from"./chunks/framework.9ae6acb2.js";const d=JSON.parse('{"title":"Oracle","description":"","frontmatter":{},"headers":[],"relativePath":"study/lang-study/oracle.md","filePath":"study/lang-study/oracle.md"}'),p={name:"study/lang-study/oracle.md"},o=n(`<h1 id="oracle" tabindex="-1">Oracle <a class="header-anchor" href="#oracle" aria-label="Permalink to &quot;Oracle&quot;">​</a></h1><h3 id="存储过程" tabindex="-1">存储过程 <a class="header-anchor" href="#存储过程" aria-label="Permalink to &quot;存储过程&quot;">​</a></h3><p>创建存储过程</p><p>有参</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">replace</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">procedure</span><span style="color:#A6ACCD;"> test_pro(param_1 </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">varchar2</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                 param_2 </span><span style="color:#F78C6C;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">varchar2</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                 param_3 </span><span style="color:#F78C6C;">out</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">varchar2</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">as</span></span>
<span class="line"><span style="color:#A6ACCD;">                                 </span><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;">声明使用的变量</span></span>
<span class="line"><span style="color:#A6ACCD;">    tets_id </span><span style="color:#C792EA;">VARCHAR2</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">64</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">begin</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    .....</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">end</span><span style="color:#A6ACCD;"> test_pro;</span></span></code></pre></div><p>无参</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">or</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">replace</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">procedure</span><span style="color:#A6ACCD;"> test_pro</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">as</span></span>
<span class="line"><span style="color:#89DDFF;">//</span><span style="color:#A6ACCD;">变量声明</span></span>
<span class="line"><span style="color:#F78C6C;">begin</span></span>
<span class="line"><span style="color:#F78C6C;">end</span><span style="color:#A6ACCD;"> test_pro;</span></span></code></pre></div><h3 id="常用函数" tabindex="-1">常用函数： <a class="header-anchor" href="#常用函数" aria-label="Permalink to &quot;常用函数：&quot;">​</a></h3><p>sys_guid(): 32位序列号，具有世界唯一性。（同一数据）</p><p>sysdate: 获取当日日期，一般与to_char 连用，即to_char(sysdate,&#39;yyyy-MM-dd&#39;)</p><p>replace(org_str,sub_str, val):将org_str中含有的sub_str进行替换为val.</p><p>instr(org_str,sub_str): 判断字符串在那个位置，返回该字符串的索引（字符串默认索引从1开始）。</p><p>regexp_count(source_str,pattern)：返回pattern在字符串出现的次数，如果未找到，返回0。</p><p>decode(expression,condition_1,result_1.condition_2,result_2,...,result_default) :如果expression符合condition_1,则返回result_1，符合condition_2,则返回result_2,如果都不符合，则返回result_default,如果result_defsault不存在，则返回null.</p><h3 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h3><p>3.1 字段是否为空</p><ul><li>某个字段不为空：</li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> test_table </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> clumn_name </span><span style="color:#F78C6C;">IS NOT NULL</span></span></code></pre></div><ul><li>ISNULL函数</li></ul><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ISNULL</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">value</span><span style="color:#A6ACCD;">,’</span><span style="color:#C792EA;">default</span><span style="color:#A6ACCD;">’) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name</span></span></code></pre></div><p>如果为NULL，返回default,否则返回value.</p><ul><li>isblank函数</li></ul><p>如果为NULL,返回true，不为NULL，返回false</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> IsBlank(</span><span style="color:#F78C6C;">value</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name</span></span></code></pre></div><ul><li>COALESCE函数</li></ul><p>判断一个或多个参数是否为空，并返回第一个不为NULL参数的值，如果全部为NULL,则返回NULL</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">SELECT</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">COALESCE</span><span style="color:#A6ACCD;"> (value1, value2, value3) </span><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> table_name</span></span></code></pre></div><ul><li>NVL函数</li></ul><p>检测值是否为NULL。如果value为NULL,返回default,否则返回value</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">SELECT NVL(value,’default’) FROM table_name</span></span></code></pre></div><p>3.2 根据分隔符将某一字段分割为多行</p><p>仅针对一行数据</p><p>chr(10)---oracle的回车符</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> regexp_substr(m.NOTE, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[^</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;">chr(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, rownum, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">AS</span><span style="color:#A6ACCD;"> NOTENAME</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  m</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">CONNECT</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">BY</span><span style="color:#A6ACCD;">  regexp_substr(m.NOTE, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[^</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;">chr(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">]+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">, rownum, </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#F78C6C;">is not NULL</span></span></code></pre></div><p>3.3 在select 语句中根据不同的值进行映射为其他的值</p><p>可以使用：</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">when</span><span style="color:#A6ACCD;"> condition1 </span><span style="color:#F78C6C;">then</span><span style="color:#A6ACCD;"> val1</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">when</span><span style="color:#A6ACCD;"> condition2 </span><span style="color:#F78C6C;">then</span><span style="color:#A6ACCD;"> val2</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">end</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">as</span><span style="color:#A6ACCD;"> tablefieid,</span></span></code></pre></div><p>3.4 oracle中没有limit用法，可以根据 rownum进行实现</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">select</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">table</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">where</span><span style="color:#A6ACCD;"> rownum</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">100</span></span></code></pre></div><p>3.5 动态执行sql语句可以用</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">EXECUTE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">IMMEDIATE</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sqlt语句</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> 参数</span></span></code></pre></div><p>eg:</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">execute</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">immediate</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">insert into dept values   (:1, :2, :3)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F78C6C;">using</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#A6ACCD;">, l_depnam, l_loc;</span></span></code></pre></div><p>3.5 mybatis #{}与\${}的区别</p><ul><li>#{}将传入的值处理为字符串，\${} 将传入的值只是进行替换。</li><li>#{}可以防止sql注入，\${}常用于传表的字段名，表名。</li></ul><p>3.6 mybatis 转义字符</p><table><thead><tr><th>原符号</th><th>mybatis</th></tr></thead><tbody><tr><td>&lt;</td><td>&amp;lt;</td></tr><tr><td>&gt;</td><td>&amp;gt;</td></tr><tr><td>&amp;</td><td>&amp;amp;</td></tr><tr><td>’</td><td>&amp;apos;</td></tr><tr><td>&quot;</td><td>&amp;quot;</td></tr></tbody></table><p>3.7 mybatis</p><p>动态sql foreach</p><p>collection 参数值一般为list与array</p><p>Mybatis中对于多个参数则封装为Map,以@Param注解的值为key,否则默认统一使用数据序号,从1开始。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">and</span><span style="color:#A6ACCD;"> PK_ID </span><span style="color:#F78C6C;">IN</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">foreach item</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">item</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">index</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">collection</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">array</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">open</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> separator</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">close</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#A6ACCD;">#{item}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">foreach</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>foreach 参数</p><p>foreach元素的属性主要有item，index，collection，open，separator，close。</p><ul><li><strong>item</strong>：集合中元素迭代时的别名，该参数为必选。</li><li><strong>index</strong>：在list和数组中,index是元素的序号，在map中，index是元素的key，该参数可选</li><li><strong>open</strong>：foreach代码的开始符号，一般是(和close=&quot;)&quot;合用。常用在in(),values()时。该参数可选</li><li><strong>separator</strong>：元素之间的分隔符，例如在in()的时候，separator=&quot;,&quot;会自动在元素中间用“,“隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。</li><li><strong>close:</strong> foreach代码的关闭符号，一般是)和open=&quot;(&quot;合用。常用在in(),values()时。该参数可选。</li><li><strong>collection:</strong> 要做foreach的对象，作为入参时，List对象默认用&quot;list&quot;代替作为键，数组对象有&quot;array&quot;代替作为键，Map对象没有默认的键。当然在作为入参时可以使用@Param(&quot;keyName&quot;)来设置键，设置keyName后，list,array将会失效。 除了入参这种情况外，还有一种作为参数对象的某个字段的时候。举个例子：如果User有属性List ids。入参是User对象，那么这个collection = &quot;ids&quot;.如果User有属性Ids ids;其中Ids是个对象，Ids有个属性List id;入参是User对象，那么collection = &quot;ids.id&quot;</li></ul><p>在使用foreach的时候最关键的也是最容易出错的就是collection属性，该属性是必须指定的，但是在不同情况下，该属性的值是不一样的，主要有一下3种情况：</p><ul><li>如果传入的是单参数且参数类型是一个List的时候，collection属性值为list .</li><li>如果传入的是单参数且参数类型是一个array数组的时候，collection的属性值为array .</li><li>如果传入的参数是多个的时候，我们就需要把它们封装成一个Map了，当然单参数也可以封装成map，实际上如果你在传入参数的时候，在MyBatis里面也是会把它封装成一个Map的，map的key就是参数名，所以这个时候collection属性值就是传入的List或array对象在自己封装的map里面的key.</li></ul><p>3.8 排序</p><p>sql中进行排序</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">order by</span><span style="color:#A6ACCD;"> 字段一 </span><span style="color:#F78C6C;">ASC</span><span style="color:#A6ACCD;">,字段二 </span><span style="color:#F78C6C;">desc</span></span></code></pre></div><p>对于数字型的字符串，如果要进行排序，可以通过利用to_number函数将字符串转为数字，然后再进行排序，否则出来的结果为乱序。</p><div class="language-sql"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">order by</span><span style="color:#A6ACCD;"> to_number(数字型字符串) </span><span style="color:#F78C6C;">desc</span></span></code></pre></div>`,62),e=[o];function t(c,r,C,y,i,A){return a(),l("div",null,e)}const F=s(p,[["render",t]]);export{d as __pageData,F as default};
